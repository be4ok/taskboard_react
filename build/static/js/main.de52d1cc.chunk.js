(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{38:function(e,t,a){e.exports=a.p+"static/media/loading.d6b5e158.svg"},41:function(e,t,a){e.exports=a(84)},46:function(e,t,a){},48:function(e,t,a){},50:function(e,t,a){},52:function(e,t,a){},84:function(e,t,a){"use strict";a.r(t);var n=a(0),r=a.n(n),c=a(36),o=a.n(c),s=(a(46),a(4)),i=a(5),l=a(8),m=a(6),u=a(9),d=(a(48),a(50),a(52),a(54),a(85)),p=a(7),b=a(3),h=a.n(b),v=a(15),E=a(10),f=a.n(E),y="GET_ERRORS",g=function(e){e?f.a.defaults.headers.common.Authorization=e:delete f.a.defaults.headers.common.Authorization},k=a(22),j=a.n(k),O="https://taskboard-39.herokuapp.com",N=function(){return function(e){localStorage.removeItem("jwtToken"),g(!1),e({type:"SET_CURRENT_USER",payload:{}})}},C=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"logout",value:function(){this.props.logout(),window.location.href="/"}},{key:"render",value:function(){var e,t=this.props.security,a=t.validToken,n=t.user,c=r.a.createElement("div",{className:"collapse navbar-collapse",id:"mobile-nav"},r.a.createElement("ul",{className:"navbar-nav mr-auto"},r.a.createElement("li",{className:"nav-item"},r.a.createElement(d.a,{className:"nav-link",to:"/board"},"Dashboard"))),r.a.createElement("ul",{className:"navbar-nav ml-auto"},r.a.createElement("li",{className:"nav-item"},r.a.createElement(d.a,{className:"nav-link",to:""},r.a.createElement("i",{className:"fas fa-user-circle mr-1"}),n.username)),r.a.createElement("li",{className:"nav-item"},r.a.createElement(d.a,{className:"nav-link",to:"/logout",onClick:this.logout.bind(this)},"Logout")))),o=r.a.createElement("div",{className:"collapse navbar-collapse",id:"mobile-nav"},r.a.createElement("ul",{className:"navbar-nav mr-auto"},r.a.createElement("li",{className:"nav-item"},r.a.createElement(d.a,{className:"nav-link",to:"/"},"Main"))),r.a.createElement("ul",{className:"navbar-nav ml-auto"},r.a.createElement("li",{className:"nav-item"},r.a.createElement(d.a,{className:"nav-link",to:"/register"},"Sign Up")),r.a.createElement("li",{className:"nav-item"},r.a.createElement(d.a,{className:"nav-link",to:"/login"},"Login"))));return e=a&&n?c:o,r.a.createElement("nav",{className:"navbar navbar-expand-sm navbar-dark bg-primary mb-4"},r.a.createElement("div",{className:"container"},r.a.createElement(d.a,{className:"navbar-brand",to:"/"},"Personal Project Management Tool"),r.a.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#mobile-nav"},r.a.createElement("span",{className:"navbar-toggler-icon"})),e))}}]),t}(n.Component),w=Object(p.b)(function(e){return{security:e.security}},{logout:N})(C),S=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"remove",value:function(e){this.props.deleteProjectTask(e,this.props.history)}},{key:"render",value:function(){var e=this.props.task;return void 0===e?r.a.createElement("div",{className:"card-header text-center alert-info"},"No tasks"):r.a.createElement("div",{className:"card mb-1 bg-light"},r.a.createElement("div",{className:"card-header text-primary"},"#",e.id),r.a.createElement("div",{className:"card-body bg-light"},r.a.createElement("h5",{className:"card-title"},e.summary),r.a.createElement("p",{className:"card-text text-truncate "},e.acceptanceCriteria),r.a.createElement(d.a,{to:"/board/"+e.board.id+"/updatetask/"+e.id,className:"btn btn-outline-primary btn-sm"},"View / Update"),r.a.createElement("button",{className:"btn btn-outline-danger ml-4 btn-sm",onClick:this.remove.bind(this,e.id)},"Delete")))}}]),t}(n.Component),T=Object(p.b)(null,{deleteProjectTask:function(e){return function(){var t=Object(v.a)(h.a.mark(function t(a){return h.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!window.confirm("Do you want to delete the task ID: ".concat(e,"? This action cannot be undone!"))){t.next=4;break}return t.next=3,f.a.delete("".concat(O,"/api/boards/tasks/").concat(e));case 3:a({type:"DELETE_PROJECT_TASK",payload:e});case 4:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()}})(S);a(38);var x=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){this.props.getProjectTasks(this.props.match.params.id)}},{key:"render",value:function(){var e=this.props.project_tasks.project_tasks,t=[],a=[],n=[];return e.map(function(e){switch(e.status){case"TO_DO":t.push(r.a.createElement(T,{key:e.id,task:e}));break;case"IN_PROGRESS":a.push(r.a.createElement(T,{key:e.id,task:e}));break;case"DONE":n.push(r.a.createElement(T,{key:e.id,task:e}))}}),r.a.createElement("div",{className:"container"},r.a.createElement(d.a,{to:"/board/"+this.props.match.params.id+"/addtask",className:"btn btn-primary mb-3"},r.a.createElement("i",{className:"fas fa-plus-circle"}," Create Project Task")),r.a.createElement("br",null),r.a.createElement("hr",null),r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-4"},r.a.createElement("div",{className:"card text-center mb-2"},r.a.createElement("div",{className:"card-header bg-secondary text-white"},r.a.createElement("h3",null,"TO DO"))),t.length>0?t:r.a.createElement("div",{className:"card-header text-center alert-info"},"No tasks")),r.a.createElement("div",{className:"col-md-4"},r.a.createElement("div",{className:"card text-center mb-2"},r.a.createElement("div",{className:"card-header bg-primary text-white"},r.a.createElement("h3",null,"In Progress"))),a.length>0?a:r.a.createElement("div",{className:"card-header text-center alert-info"},"No tasks")),r.a.createElement("div",{className:"col-md-4"},r.a.createElement("div",{className:"card text-center mb-2"},r.a.createElement("div",{className:"card-header bg-success text-white"},r.a.createElement("h3",null,"Done"))),n.length>0?n:r.a.createElement("div",{className:"card-header text-center alert-info"},"No tasks"))))}}]),t}(n.Component),_=Object(p.b)(function(e){return{project_tasks:e.task}},{getProjectTasks:function(e){return function(){var t=Object(v.a)(h.a.mark(function t(a){var n;return h.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,f.a.get("".concat(O,"/api/boards/").concat(e,"/tasks"));case 2:n=t.sent,a({type:"GET_PROJECT_TASKS",payload:n.data});case 4:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()}})(x),P=a(86),D=a(89),R=a(88),B=a(19),A=a(39),U={},M=a(13),H={project_tasks:[],project_task:{}},G={user:{},validToken:!1},J={project_boards:[],project_board:{}},I=Object(B.c)({validation:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:U,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case y:return t.payload;default:return e}},board:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:J,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"GET_PROJECT_BOARDS":return Object(M.a)({},e,{project_boards:t.payload});case"GET_PROJECT_BOARD":return Object(M.a)({},e,{project_board:t.payload});case"DELETE_PROJECT_BOARD":return Object(M.a)({},e,{project_boards:e.project_boards.filter(function(e){return e.id!==t.payload})});default:return e}},task:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:H,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"GET_PROJECT_TASKS":return Object(M.a)({},e,{project_tasks:t.payload});case"GET_PROJECT_TASK":return Object(M.a)({},e,{project_task:t.payload});case"GET_PROJECT_TASK_COUNT":return Object(M.a)({},e,{project_task_count:t.payload});case"DELETE_PROJECT_TASK":return Object(M.a)({},e,{project_tasks:e.project_tasks.filter(function(e){return e.id!==t.payload})});default:return e}},security:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:G,a=arguments.length>1?arguments[1]:void 0;switch(a.type){case"SET_CURRENT_USER":return Object(M.a)({},t,{validToken:(e=a.payload,!(!e||!Object.keys(e).length)),user:a.payload});default:return t}}}),L={},W=[A.a],K=window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__(),F=window.navigator.userAgent.includes("Chrome")&&K?Object(B.e)(I,L,Object(B.d)(B.a.apply(void 0,W),K)):Object(B.e)(I,L,Object(B.d)(B.a.apply(void 0,W))),V=a(2),X=a(12),z=a.n(X);function Y(e,t){var a=[];e.apierror&&"Validation error"===e.apierror.message&&e.apierror.subErrors.filter(function(e){return e.field===t}).map(function(e,t){a.push(r.a.createElement("p",{key:t,className:"error-text"},e.message))});return a}var $=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(m.a)(t).call(this,e))).state={isEditMode:!1,task:{},validation:{}},a.onChange=a.onChange.bind(Object(V.a)(Object(V.a)(a))),a.onSubmit=a.onSubmit.bind(Object(V.a)(Object(V.a)(a))),a.onEditClickHandler=a.onEditClickHandler.bind(Object(V.a)(Object(V.a)(a))),a}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){var e=this.props.match.params.id;this.props.getProjectTask(e)}},{key:"componentWillReceiveProps",value:function(e){this.setState({validation:e.validation}),Object.keys(e.validation).length||this.setState({task:e.project_task.project_task})}},{key:"onChange",value:function(e){var t=e.target.value,a=e.target.name,n=Object(M.a)({},this.state.task);n[a]=t,this.setState({task:n})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.state.task;this.props.updateProjectTask(t,t.board.id,this.props.history)}},{key:"onEditClickHandler",value:function(e){e.preventDefault(),this.setState({isEditMode:!this.state.isEditMode})}},{key:"render",value:function(){var e,t=this.state,a=t.task,n=t.validation,c=t.isEditMode;Object.keys(a).length&&(e=a.board.id);var o=Y(n,"summary"),s=Y(n,"acceptanceCriteria");return r.a.createElement("div",{className:"addProjectTask"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-8 m-auto"},r.a.createElement(d.a,{to:"/board/"+e+"/taskboard",className:"btn btn-outline-dark"},"Back to Board"),r.a.createElement("h4",{className:"display-4 text-center"},"Update Project Task #",a.id),r.a.createElement("form",{onSubmit:this.onSubmit},r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Summary:"),!c&&r.a.createElement("div",{className:"form-control-lg float-input"},a.summary),c&&r.a.createElement("div",null,r.a.createElement("input",{autoFocus:!0,className:z()("form-control form-control-lg",{"is-invalid":o.length}),type:"text",name:"summary",placeholder:"Project Task summary",value:a.summary,onChange:this.onChange,autoComplete:"summary",id:"summary"})),o,r.a.createElement("hr",null)),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Acceptance criteria:"),!c&&r.a.createElement("div",{className:"form-control-lg float-input-ac"},a.acceptanceCriteria),c&&r.a.createElement("div",null,r.a.createElement("textarea",{className:z()("form-control form-control-lg",{"is-invalid":s.length||a.acceptanceCriteria.length>200}),placeholder:"Acceptance Criteria",name:"acceptanceCriteria",value:a.acceptanceCriteria,onChange:this.onChange}),r.a.createElement("span",{className:z()("input-length",{"input-length-alert":a.acceptanceCriteria.length>200})},200-a.acceptanceCriteria.length)),s,r.a.createElement("hr",null)),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Status:"),!c&&r.a.createElement("div",{className:"form-control-lg float-input"},a.status),c&&r.a.createElement("select",{className:"form-control form-control-lg",name:"status",value:a.status,onChange:this.onChange},r.a.createElement("option",{value:""},"Select Status"),r.a.createElement("option",{value:"TO_DO"},"TO DO"),r.a.createElement("option",{value:"IN_PROGRESS"},"IN PROGRESS"),r.a.createElement("option",{value:"DONE"},"DONE"))),r.a.createElement("div",{className:"buttons-container"},r.a.createElement("div",{className:"buttons-group"},r.a.createElement("button",{onClick:this.onEditClickHandler,className:"btn btn-lg button-item btn-outline-"+(c?"danger":"primary")},c?"Cancel":"Edit"),r.a.createElement("input",{type:"submit",value:"Save",className:"btn btn-outline-success btn-lg button-item"}))))))))}}]),t}(n.Component),q=Object(p.b)(function(e){return{project_task:e.task,validation:e.validation}},{getProjectTask:function(e){return function(){var t=Object(v.a)(h.a.mark(function t(a){var n;return h.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,f.a.get("".concat(O,"/api/boards/tasks/").concat(e));case 2:n=t.sent,a({type:"GET_PROJECT_TASK",payload:n.data}),a({type:y,payload:{}});case 5:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},updateProjectTask:function(e,t,a){return function(){var n=Object(v.a)(h.a.mark(function n(r){return h.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,f.a.put("".concat(O,"/api/boards/tasks"),e);case 3:a.push("/board/".concat(t,"/taskboard")),r({type:y,payload:{}}),n.next=10;break;case 7:n.prev=7,n.t0=n.catch(0),r({type:y,payload:n.t0.response.data});case 10:case"end":return n.stop()}},n,this,[[0,7]])}));return function(e){return n.apply(this,arguments)}}()}})($),Q=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(m.a)(t).call(this,e))).emptyTask={id:"",summary:"",acceptanceCriteria:"",status:"",board:{id:""}},a.state={task:a.emptyTask,validation:{}},a.onChange=a.onChange.bind(Object(V.a)(Object(V.a)(a))),a.onSubmit=a.onSubmit.bind(Object(V.a)(Object(V.a)(a))),a.onCancelClickHandler=a.onCancelClickHandler.bind(Object(V.a)(Object(V.a)(a))),a}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({validation:e.validation})}},{key:"onChange",value:function(e){var t=e.target.value,a=e.target.name,n=Object(M.a)({},this.state.task);n[a]=t,this.setState({task:n})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.state.task;t.board.id=this.props.match.params.id,this.props.addProjectTask(t,t.board.id,this.props.history)}},{key:"onCancelClickHandler",value:function(e){e.preventDefault(),this.props.history.push("/board/"+this.props.match.params.id+"/taskboard")}},{key:"render",value:function(){var e=this.state,t=e.task,a=e.validation,n=Y(a,"summary"),c=Y(a,"acceptanceCriteria");return r.a.createElement("div",{className:"addProjectTask"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-8 m-auto"},r.a.createElement(d.a,{to:"/board/"+this.props.match.params.id+"/taskboard",className:"btn btn-outline-dark"},"Back to Board"),r.a.createElement("h4",{className:"display-4 text-center"},"Add new Project Task"),r.a.createElement("form",{onSubmit:this.onSubmit},r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Summary:"),r.a.createElement("div",null,r.a.createElement("input",{autoFocus:!0,className:z()("form-control form-control-lg",{"is-invalid":n.length}),type:"text",name:"summary",placeholder:"Project Task summary",value:t.summary,onChange:this.onChange,autoComplete:"summary",id:"summary"})),n,r.a.createElement("hr",null)),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Acceptance criteria:"),r.a.createElement("div",null,r.a.createElement("textarea",{className:z()("form-control form-control-lg",{"is-invalid":c.length||t.acceptanceCriteria.length>200}),placeholder:"Acceptance Criteria",name:"acceptanceCriteria",value:t.acceptanceCriteria,onChange:this.onChange}),r.a.createElement("span",{className:z()("input-length",{"input-length-alert":t.acceptanceCriteria.length>200})},200-t.acceptanceCriteria.length)),c,r.a.createElement("hr",null)),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Status:"),r.a.createElement("select",{className:"form-control form-control-lg",name:"status",value:t.status,onChange:this.onChange},r.a.createElement("option",{value:""},"Select Status"),r.a.createElement("option",{value:"TO_DO"},"TO DO"),r.a.createElement("option",{value:"IN_PROGRESS"},"IN PROGRESS"),r.a.createElement("option",{value:"DONE"},"DONE"))),r.a.createElement("div",{className:"buttons-container"},r.a.createElement("div",{className:"buttons-group"},r.a.createElement("button",{onClick:this.onCancelClickHandler,className:"btn btn-lg button-item btn-outline-danger"},"Cancel"),r.a.createElement("input",{type:"submit",value:"Save",className:"btn btn-outline-success btn-lg button-item"}))))))))}}]),t}(n.Component),Z=Object(p.b)(function(e){return{validation:e.validation}},{addProjectTask:function(e,t,a){return function(){var n=Object(v.a)(h.a.mark(function n(r){return h.a.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.prev=0,n.next=3,f.a.post("".concat(O,"/api/boards/tasks"),e);case 3:a.push("/board/".concat(t,"/taskboard")),r({type:y,payload:{}}),n.next=10;break;case 7:n.prev=7,n.t0=n.catch(0),r({type:y,payload:n.t0.response.data});case 10:case"end":return n.stop()}},n,this,[[0,7]])}));return function(e){return n.apply(this,arguments)}}()}})(Q),ee=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(m.a)(t).call(this,e))).state={count:""},a}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentWillMount",value:function(){var e=this;f.a.get("".concat(O,"/api/boards/").concat(this.props.board.id,"/count")).then(function(t){return e.setState({count:t.data})})}},{key:"render",value:function(){var e=this.state.count;return r.a.createElement("span",null,e)}}]),t}(n.Component),te=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"clickOpenBoardHandle",value:function(){window.location.assign("/board/"+this.props.board.id+"/taskboard")}},{key:"remove",value:function(e){this.props.deleteProjectBoard(e)}},{key:"render",value:function(){var e=this.props.board;return r.a.createElement("div",{className:"col-sm-6"},r.a.createElement("div",{className:"card border-primary mb-3"},r.a.createElement("div",{onClick:this.clickOpenBoardHandle.bind(this),className:"card-header board-item"},r.a.createElement("div",{className:"board-id"},"#",e.id),r.a.createElement("div",{className:"task-count"},"Tasks: ",r.a.createElement(ee,{board:e}))),r.a.createElement("div",{className:"card-body"},r.a.createElement("h5",{className:"card-title"},e.name),r.a.createElement("p",{className:"card-text"},e.description),r.a.createElement(d.a,{to:"/board/"+e.id+"/taskboard",className:"btn btn-outline-success btn-sm"},"Open"),r.a.createElement(d.a,{to:"/board/edit/"+e.id,className:"btn btn-outline-primary btn-sm ml-4"},"Edit"),r.a.createElement("button",{className:"btn btn-outline-danger ml-4 btn-sm",onClick:this.remove.bind(this,e.id)},"Delete"))))}}]),t}(n.Component),ae=Object(p.b)(function(e){return{}},{deleteProjectBoard:function(e){return function(){var t=Object(v.a)(h.a.mark(function t(a){return h.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!window.confirm("Do you want to delete the board ID: ".concat(e," with all tasks inside? This action cannot be undone!"))){t.next=4;break}return t.next=3,f.a.delete("".concat(O,"/api/boards/").concat(e));case 3:a({type:"DELETE_PROJECT_BOARD",payload:e});case 4:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()},getProjectTaskCount:function(e){return function(){var t=Object(v.a)(h.a.mark(function t(a){var n;return h.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,f.a.get("".concat(O,"/api/boards/").concat(e,"/count"));case 2:n=t.sent,a({type:"GET_PROJECT_TASK_COUNT",payload:n.data});case 4:case"end":return t.stop()}},t,this)}));return function(e){return t.apply(this,arguments)}}()}})(te),ne=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){this.props.getProjectBoards()}},{key:"render",value:function(){var e=this,t=this.props.project_boards.project_boards,a=[];return t.map(function(t){return a.push(r.a.createElement(ae,{key:t.id,board:t,remove:e.remove}))}),r.a.createElement("div",{className:"container"},r.a.createElement("h4",{className:"display-4 text-center"},"Your project boards"),r.a.createElement(d.a,{to:"/board/add",className:"btn btn-primary mb-3"},r.a.createElement("i",{className:"fas fa-plus-circle"}," Create New Board")),r.a.createElement("hr",null),r.a.createElement("div",{className:"row"},0===a.length&&r.a.createElement("div",{className:"card-header text-center alert-info"},"No boards"),a))}}]),t}(n.Component),re=Object(p.b)(function(e){return{project_boards:e.board}},{getProjectBoards:function(){return function(){var e=Object(v.a)(h.a.mark(function e(t){var a;return h.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,f.a.get("".concat(O,"/api/boards"));case 2:a=e.sent,t({type:"GET_PROJECT_BOARDS",payload:a.data});case 4:case"end":return e.stop()}},e,this)}));return function(t){return e.apply(this,arguments)}}()}})(ne),ce=function(e){function t(e){var a;return Object(s.a)(this,t),(a=Object(l.a)(this,Object(m.a)(t).call(this,e))).emptyBoard={name:"",description:""},a.state={board:a.emptyBoard,validation:{}},a.onChange=a.onChange.bind(Object(V.a)(Object(V.a)(a))),a.onSubmit=a.onSubmit.bind(Object(V.a)(Object(V.a)(a))),a.onCancelClickHandler=a.onCancelClickHandler.bind(Object(V.a)(Object(V.a)(a))),a}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentWillReceiveProps",value:function(e){this.setState({validation:e.validation})}},{key:"onChange",value:function(e){var t=e.target.value,a=e.target.name,n=Object(M.a)({},this.state.board);n[a]=t,this.setState({board:n})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.state.board;this.props.addProjectBoard(t,this.props.history)}},{key:"onCancelClickHandler",value:function(e){e.preventDefault(),this.props.history.push("/board")}},{key:"render",value:function(){var e=this.state,t=e.board,a=e.validation,n=Y(a,"name"),c=Y(a,"description");return r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-8 m-auto"},r.a.createElement(d.a,{to:"/",className:"btn btn-outline-dark"},"Back to Boards"),r.a.createElement("h4",{className:"display-4 text-center"},"Add a new project board"),r.a.createElement("form",{onSubmit:this.onSubmit},r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Name:"),r.a.createElement("div",null,r.a.createElement("input",{autoFocus:!0,className:z()("form-control form-control-lg",{"is-invalid":n.length}),type:"text",name:"name",placeholder:"Project Board name",value:t.name,onChange:this.onChange,autoComplete:"name",id:"name"})),n,r.a.createElement("hr",null)),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Description:"),r.a.createElement("div",null,r.a.createElement("textarea",{className:z()("form-control form-control-lg",{"is-invalid":c.length}),placeholder:"Description",name:"description",value:t.description,onChange:this.onChange})),c,r.a.createElement("hr",null)),r.a.createElement("div",{className:"buttons-container"},r.a.createElement("div",{className:"buttons-group"},r.a.createElement("button",{onClick:this.onCancelClickHandler,className:"btn btn-lg button-item btn-outline-danger"},"Cancel"),r.a.createElement("input",{type:"submit",value:"Save",className:"btn btn-outline-success btn-lg button-item"})))))))}}]),t}(n.Component),oe=Object(p.b)(function(e){return{validation:e.validation}},{addProjectBoard:function(e,t){return function(){var a=Object(v.a)(h.a.mark(function a(n){return h.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,f.a.post("".concat(O,"/api/boards"),e);case 3:t.push("/board"),n({type:y,payload:{}}),a.next=10;break;case 7:a.prev=7,a.t0=a.catch(0),n({type:y,payload:a.t0.response.data});case 10:case"end":return a.stop()}},a,this,[[0,7]])}));return function(e){return a.apply(this,arguments)}}()}})(ce),se=function(e){function t(){var e;return Object(s.a)(this,t),(e=Object(l.a)(this,Object(m.a)(t).call(this))).state={isEditMode:!1,board:{},validation:{}},e.onChange=e.onChange.bind(Object(V.a)(Object(V.a)(e))),e.onSubmit=e.onSubmit.bind(Object(V.a)(Object(V.a)(e))),e.onEditClickHandler=e.onEditClickHandler.bind(Object(V.a)(Object(V.a)(e))),e}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){var e=this.props.match.params.id;this.props.getProjectBoard(e,this.props.history)}},{key:"componentWillReceiveProps",value:function(e){this.setState({validation:e.validation}),Object.keys(e.validation).length||this.setState({board:e.project_board.project_board})}},{key:"onChange",value:function(e){var t=e.target.value,a=e.target.name,n=Object(M.a)({},this.state.board);n[a]=t,this.setState({board:n})}},{key:"onSubmit",value:function(e){e.preventDefault();var t=this.state.board;this.props.updateProjectBoard(t,this.props.history)}},{key:"onEditClickHandler",value:function(e){this.setState({validation:{}}),e.preventDefault(),this.setState({isEditMode:!this.state.isEditMode})}},{key:"render",value:function(){var e=this.state,t=e.board,a=e.isEditMode,n=e.validation,c=Y(n,"name"),o=Y(n,"description");return r.a.createElement("div",{className:"addProjectTask"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-8 m-auto"},r.a.createElement(d.a,{to:"/board",className:"btn btn-outline-dark"},"Back to Boards"),r.a.createElement("h4",{className:"display-4 text-center"},"Update Project Board #",t.id),r.a.createElement("form",{onSubmit:this.onSubmit},r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Name:"),!a&&r.a.createElement("div",{className:"form-control-lg float-input"},t.name),a&&r.a.createElement("div",null,r.a.createElement("input",{autoFocus:!0,className:z()("form-control form-control-lg",{"is-invalid":c.length}),type:"text",name:"name",placeholder:"Project Board name",value:t.name,onChange:this.onChange,autoComplete:"name",id:"name"})),c,r.a.createElement("hr",null)),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",{className:"title-input"},"Description:"),!a&&r.a.createElement("div",{className:"form-control-lg float-input-ac"},t.description),a&&r.a.createElement("div",null,r.a.createElement("textarea",{className:z()("form-control form-control-lg",{"is-invalid":o.length}),placeholder:"Description",name:"description",value:t.description,onChange:this.onChange})),o,r.a.createElement("hr",null)),r.a.createElement("div",{className:"buttons-container"},r.a.createElement("div",{className:"buttons-group"},r.a.createElement("button",{onClick:this.onEditClickHandler,className:"btn btn-lg button-item btn-outline-"+(a?"danger":"primary")},a?"Cancel":"Edit"),r.a.createElement("input",{type:"submit",value:"Save",className:"btn btn-outline-success btn-lg button-item"}))))))))}}]),t}(n.Component),ie=Object(p.b)(function(e){return{project_board:e.board,validation:e.validation}},{getProjectBoard:function(e,t){return function(){var a=Object(v.a)(h.a.mark(function a(n){var r;return h.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,f.a.get("".concat(O,"/api/boards/").concat(e));case 3:r=a.sent,n({type:"GET_PROJECT_BOARD",payload:r.data}),n({type:y,payload:{}}),a.next=11;break;case 8:a.prev=8,a.t0=a.catch(0),t.push("/board");case 11:case"end":return a.stop()}},a,this,[[0,8]])}));return function(e){return a.apply(this,arguments)}}()},updateProjectBoard:function(e,t){return function(){var a=Object(v.a)(h.a.mark(function a(n){return h.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,f.a.put("".concat(O,"/api/boards"),e);case 3:t.push("/board"),n({type:y,payload:{}}),a.next=10;break;case 7:a.prev=7,a.t0=a.catch(0),n({type:y,payload:a.t0.response.data});case 10:case"end":return a.stop()}},a,this,[[0,7]])}));return function(e){return a.apply(this,arguments)}}()}})(se),le=a(21),me=function(e){function t(){var e;return Object(s.a)(this,t),(e=Object(l.a)(this,Object(m.a)(t).call(this))).state={username:"",password:"",validation:{}},e.onChange=e.onChange.bind(Object(V.a)(Object(V.a)(e))),e.onSubmit=e.onSubmit.bind(Object(V.a)(Object(V.a)(e))),e}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){this.props.security.validToken&&this.props.history.push("/board")}},{key:"componentWillReceiveProps",value:function(e){e.validation&&this.setState({validation:e.validation}),e.security.validToken&&this.props.history.push("/board")}},{key:"onChange",value:function(e){this.setState(Object(le.a)({},e.target.name,e.target.value))}},{key:"onSubmit",value:function(e){e.preventDefault();var t={username:this.state.username,password:this.state.password};this.props.login(t)}},{key:"render",value:function(){var e=this.state.validation,t=Y(e,"username"),a=Y(e,"password");return r.a.createElement("div",{className:"login"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-8 m-auto"},r.a.createElement("h1",{className:"display-4 text-center"},"Log In"),r.a.createElement("form",{onSubmit:this.onSubmit},r.a.createElement("div",{className:"form-group"},r.a.createElement("div",null,r.a.createElement("input",{autoFocus:!0,type:"text",className:z()("form-control form-control-lg",{"is-invalid":t.length}),placeholder:"Username",name:"username",value:this.state.username,onChange:this.onChange})),t),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",null,r.a.createElement("input",{type:"password",className:z()("form-control form-control-lg",{"is-invalid":a.length}),placeholder:"Password",name:"password",value:this.state.password,onChange:this.onChange})),a),r.a.createElement("input",{type:"submit",className:"btn btn-info btn-block mt-4"}))))))}}]),t}(n.Component),ue=Object(p.b)(function(e){return{security:e.security,validation:e.validation}},{login:function(e){return function(){var t=Object(v.a)(h.a.mark(function t(a){var n,r,c;return h.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,f.a.post("".concat(O,"/api/users/login"),e);case 3:n=t.sent,r=n.data.token,localStorage.setItem("jwtToken",r),g(r),c=j()(r),a({type:"SET_CURRENT_USER",payload:c}),t.next=14;break;case 11:t.prev=11,t.t0=t.catch(0),a({type:y,payload:t.t0.response.data});case 14:case"end":return t.stop()}},t,this,[[0,11]])}));return function(e){return t.apply(this,arguments)}}()}})(me),de=function(e){function t(){var e;return Object(s.a)(this,t),(e=Object(l.a)(this,Object(m.a)(t).call(this))).state={username:"",password:"",confirmPassword:"",validation:{}},e.onChange=e.onChange.bind(Object(V.a)(Object(V.a)(e))),e.onSubmit=e.onSubmit.bind(Object(V.a)(Object(V.a)(e))),e}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){this.props.security.validToken&&this.props.history.push("/board")}},{key:"componentWillReceiveProps",value:function(e){e.validation&&this.setState({validation:e.validation})}},{key:"onChange",value:function(e){this.setState(Object(le.a)({},e.target.name,e.target.value))}},{key:"onSubmit",value:function(e){e.preventDefault();var t={username:this.state.username,password:this.state.password,confirmPassword:this.state.confirmPassword};this.props.createNewUser(t,this.props.history)}},{key:"render",value:function(){var e=this.state.validation,t=Y(e,"username"),a=Y(e,"password"),n=Y(e,"confirmPassword");return r.a.createElement("div",{className:"register"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-8 m-auto"},r.a.createElement("h1",{className:"display-4 text-center"},"Sign Up"),r.a.createElement("p",{className:"lead text-center"},"Create your Account"),r.a.createElement("form",{onSubmit:this.onSubmit},r.a.createElement("div",{className:"form-group"},r.a.createElement("div",null,r.a.createElement("input",{autoFocus:!0,type:"text",className:z()("form-control form-control-lg",{"is-invalid":t.length}),placeholder:"Username",name:"username",value:this.state.username,onChange:this.onChange})),t),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",null,r.a.createElement("input",{type:"password",className:z()("form-control form-control-lg",{"is-invalid":a.length}),placeholder:"Password",name:"password",value:this.state.password,onChange:this.onChange})),a),r.a.createElement("div",{className:"form-group"},r.a.createElement("div",null,r.a.createElement("input",{type:"password",className:z()("form-control form-control-lg",{"is-invalid":n.length}),placeholder:"Confirm Password",name:"confirmPassword",value:this.state.confirmPassword,onChange:this.onChange})),n),r.a.createElement("input",{type:"submit",className:"btn btn-info btn-block mt-4"}))))))}}]),t}(n.Component),pe=Object(p.b)(function(e){return{validation:e.validation,security:e.security}},{createNewUser:function(e,t){return function(){var a=Object(v.a)(h.a.mark(function a(n){return h.a.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,f.a.post("".concat(O,"/api/users/register"),e);case 3:t.push("/login"),n({type:y,payload:{}}),a.next=10;break;case 7:a.prev=7,a.t0=a.catch(0),n({type:y,payload:a.t0.response.data});case 10:case"end":return a.stop()}},a,this,[[0,7]])}));return function(e){return a.apply(this,arguments)}}()}})(de),be=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"componentDidMount",value:function(){this.props.security.validToken&&this.props.history.push("/board")}},{key:"render",value:function(){return r.a.createElement("div",{className:"landing"},r.a.createElement("div",{className:"light-overlay landing-inner text-dark"},r.a.createElement("div",{className:"container"},r.a.createElement("div",{className:"row"},r.a.createElement("div",{className:"col-md-12 text-center"},r.a.createElement("h1",{className:"display-3 mb-4"},"Personal Project Management Tool"),r.a.createElement("p",{className:"lead"},"Create your account to join active projects or start your own"),r.a.createElement("hr",null),r.a.createElement(d.a,{className:"btn btn-lg btn-primary mr-2",to:"/register"},"Sign Up"),r.a.createElement(d.a,{className:"btn btn-lg btn-secondary mr-2",to:"/login"},"Login"))))))}}]),t}(n.Component),he=Object(p.b)(function(e){return{security:e.security}})(be),ve=a(40),Ee=a(87),fe=Object(p.b)(function(e){return{security:e.security}})(function(e){var t=e.component,a=e.security,n=Object(ve.a)(e,["component","security"]);return r.a.createElement(R.a,Object.assign({},n,{render:function(e){return!0===a.validToken?r.a.createElement(t,e):r.a.createElement(Ee.a,{to:"/login"})}}))}),ye=localStorage.jwtToken;if(ye){g(ye);var ge=j()(ye);F.dispatch({type:"SET_CURRENT_USER",payload:ge});var ke=Date.now()/1e3;ge.exp<ke&&(F.dispatch(N()),window.location.href="/login")}var je=function(e){function t(){return Object(s.a)(this,t),Object(l.a)(this,Object(m.a)(t).apply(this,arguments))}return Object(u.a)(t,e),Object(i.a)(t,[{key:"render",value:function(){return r.a.createElement(p.a,{store:F},r.a.createElement(P.a,null,r.a.createElement("div",{className:"App"},r.a.createElement(w,null),r.a.createElement(D.a,null,r.a.createElement(fe,{exact:!0,path:"/board",component:re}),r.a.createElement(fe,{exact:!0,path:"/board/:id/taskboard",component:_}),r.a.createElement(fe,{exact:!0,path:"/board/add",component:oe}),r.a.createElement(fe,{exact:!0,path:"/board/edit/:id",component:ie}),r.a.createElement(fe,{exact:!0,path:"/board/:id/updatetask/:id",component:q}),r.a.createElement(fe,{exact:!0,path:"/board/:id/addtask",component:Z}),r.a.createElement(R.a,{exact:!0,path:"/",component:he}),r.a.createElement(R.a,{exact:!0,path:"/login",component:ue}),r.a.createElement(R.a,{exact:!0,path:"/register",component:pe})))))}}]),t}(n.Component);Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(r.a.createElement(je,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}},[[41,2,1]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,